// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: answer.go

package telegram

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *AnswerCallbackQueryParameters) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *AnswerCallbackQueryParameters) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ "callback_query_id":`)
	fflib.WriteJsonString(buf, string(j.CallbackQueryID))
	buf.WriteByte(',')
	if len(j.Text) != 0 {
		buf.WriteString(`"text":`)
		fflib.WriteJsonString(buf, string(j.Text))
		buf.WriteByte(',')
	}
	if len(j.URL) != 0 {
		buf.WriteString(`"url":`)
		fflib.WriteJsonString(buf, string(j.URL))
		buf.WriteByte(',')
	}
	if j.ShowAlert != false {
		if j.ShowAlert {
			buf.WriteString(`"show_alert":true`)
		} else {
			buf.WriteString(`"show_alert":false`)
		}
		buf.WriteByte(',')
	}
	if j.CacheTime != 0 {
		buf.WriteString(`"cache_time":`)
		fflib.FormatBits2(buf, uint64(j.CacheTime), 10, j.CacheTime < 0)
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffjtAnswerCallbackQueryParametersbase = iota
	ffjtAnswerCallbackQueryParametersnosuchkey

	ffjtAnswerCallbackQueryParametersCallbackQueryID

	ffjtAnswerCallbackQueryParametersText

	ffjtAnswerCallbackQueryParametersURL

	ffjtAnswerCallbackQueryParametersShowAlert

	ffjtAnswerCallbackQueryParametersCacheTime
)

var ffjKeyAnswerCallbackQueryParametersCallbackQueryID = []byte("callback_query_id")

var ffjKeyAnswerCallbackQueryParametersText = []byte("text")

var ffjKeyAnswerCallbackQueryParametersURL = []byte("url")

var ffjKeyAnswerCallbackQueryParametersShowAlert = []byte("show_alert")

var ffjKeyAnswerCallbackQueryParametersCacheTime = []byte("cache_time")

// UnmarshalJSON umarshall json - template of ffjson
func (j *AnswerCallbackQueryParameters) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *AnswerCallbackQueryParameters) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtAnswerCallbackQueryParametersbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtAnswerCallbackQueryParametersnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffjKeyAnswerCallbackQueryParametersCallbackQueryID, kn) {
						currentKey = ffjtAnswerCallbackQueryParametersCallbackQueryID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyAnswerCallbackQueryParametersCacheTime, kn) {
						currentKey = ffjtAnswerCallbackQueryParametersCacheTime
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffjKeyAnswerCallbackQueryParametersShowAlert, kn) {
						currentKey = ffjtAnswerCallbackQueryParametersShowAlert
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffjKeyAnswerCallbackQueryParametersText, kn) {
						currentKey = ffjtAnswerCallbackQueryParametersText
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'u':

					if bytes.Equal(ffjKeyAnswerCallbackQueryParametersURL, kn) {
						currentKey = ffjtAnswerCallbackQueryParametersURL
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.AsciiEqualFold(ffjKeyAnswerCallbackQueryParametersCacheTime, kn) {
					currentKey = ffjtAnswerCallbackQueryParametersCacheTime
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyAnswerCallbackQueryParametersShowAlert, kn) {
					currentKey = ffjtAnswerCallbackQueryParametersShowAlert
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyAnswerCallbackQueryParametersURL, kn) {
					currentKey = ffjtAnswerCallbackQueryParametersURL
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyAnswerCallbackQueryParametersText, kn) {
					currentKey = ffjtAnswerCallbackQueryParametersText
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyAnswerCallbackQueryParametersCallbackQueryID, kn) {
					currentKey = ffjtAnswerCallbackQueryParametersCallbackQueryID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtAnswerCallbackQueryParametersnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtAnswerCallbackQueryParametersCallbackQueryID:
					goto handle_CallbackQueryID

				case ffjtAnswerCallbackQueryParametersText:
					goto handle_Text

				case ffjtAnswerCallbackQueryParametersURL:
					goto handle_URL

				case ffjtAnswerCallbackQueryParametersShowAlert:
					goto handle_ShowAlert

				case ffjtAnswerCallbackQueryParametersCacheTime:
					goto handle_CacheTime

				case ffjtAnswerCallbackQueryParametersnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_CallbackQueryID:

	/* handler: j.CallbackQueryID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.CallbackQueryID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Text:

	/* handler: j.Text type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Text = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_URL:

	/* handler: j.URL type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.URL = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ShowAlert:

	/* handler: j.ShowAlert type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.ShowAlert = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.ShowAlert = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CacheTime:

	/* handler: j.CacheTime type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.CacheTime = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *AnswerInlineQueryParameters) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *AnswerInlineQueryParameters) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ "inline_query_id":`)
	fflib.WriteJsonString(buf, string(j.InlineQueryID))
	buf.WriteByte(',')
	if len(j.NextOffset) != 0 {
		buf.WriteString(`"next_offset":`)
		fflib.WriteJsonString(buf, string(j.NextOffset))
		buf.WriteByte(',')
	}
	if len(j.SwitchPrivateMessageText) != 0 {
		buf.WriteString(`"switch_pm_text":`)
		fflib.WriteJsonString(buf, string(j.SwitchPrivateMessageText))
		buf.WriteByte(',')
	}
	if len(j.SwitchPrivateMessageParameter) != 0 {
		buf.WriteString(`"switch_pm_parameter":`)
		fflib.WriteJsonString(buf, string(j.SwitchPrivateMessageParameter))
		buf.WriteByte(',')
	}
	buf.WriteString(`"results":`)
	if j.Results != nil {
		buf.WriteString(`[`)
		for i, v := range j.Results {
			if i != 0 {
				buf.WriteString(`,`)
			}
			/* Interface types must use runtime reflection. type=interface {} kind=interface */
			err = buf.Encode(v)
			if err != nil {
				return err
			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteByte(',')
	if j.CacheTime != 0 {
		buf.WriteString(`"cache_time":`)
		fflib.FormatBits2(buf, uint64(j.CacheTime), 10, j.CacheTime < 0)
		buf.WriteByte(',')
	}
	if j.IsPersonal != false {
		if j.IsPersonal {
			buf.WriteString(`"is_personal":true`)
		} else {
			buf.WriteString(`"is_personal":false`)
		}
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffjtAnswerInlineQueryParametersbase = iota
	ffjtAnswerInlineQueryParametersnosuchkey

	ffjtAnswerInlineQueryParametersInlineQueryID

	ffjtAnswerInlineQueryParametersNextOffset

	ffjtAnswerInlineQueryParametersSwitchPrivateMessageText

	ffjtAnswerInlineQueryParametersSwitchPrivateMessageParameter

	ffjtAnswerInlineQueryParametersResults

	ffjtAnswerInlineQueryParametersCacheTime

	ffjtAnswerInlineQueryParametersIsPersonal
)

var ffjKeyAnswerInlineQueryParametersInlineQueryID = []byte("inline_query_id")

var ffjKeyAnswerInlineQueryParametersNextOffset = []byte("next_offset")

var ffjKeyAnswerInlineQueryParametersSwitchPrivateMessageText = []byte("switch_pm_text")

var ffjKeyAnswerInlineQueryParametersSwitchPrivateMessageParameter = []byte("switch_pm_parameter")

var ffjKeyAnswerInlineQueryParametersResults = []byte("results")

var ffjKeyAnswerInlineQueryParametersCacheTime = []byte("cache_time")

var ffjKeyAnswerInlineQueryParametersIsPersonal = []byte("is_personal")

// UnmarshalJSON umarshall json - template of ffjson
func (j *AnswerInlineQueryParameters) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *AnswerInlineQueryParameters) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtAnswerInlineQueryParametersbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtAnswerInlineQueryParametersnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffjKeyAnswerInlineQueryParametersCacheTime, kn) {
						currentKey = ffjtAnswerInlineQueryParametersCacheTime
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffjKeyAnswerInlineQueryParametersInlineQueryID, kn) {
						currentKey = ffjtAnswerInlineQueryParametersInlineQueryID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyAnswerInlineQueryParametersIsPersonal, kn) {
						currentKey = ffjtAnswerInlineQueryParametersIsPersonal
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'n':

					if bytes.Equal(ffjKeyAnswerInlineQueryParametersNextOffset, kn) {
						currentKey = ffjtAnswerInlineQueryParametersNextOffset
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffjKeyAnswerInlineQueryParametersResults, kn) {
						currentKey = ffjtAnswerInlineQueryParametersResults
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffjKeyAnswerInlineQueryParametersSwitchPrivateMessageText, kn) {
						currentKey = ffjtAnswerInlineQueryParametersSwitchPrivateMessageText
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyAnswerInlineQueryParametersSwitchPrivateMessageParameter, kn) {
						currentKey = ffjtAnswerInlineQueryParametersSwitchPrivateMessageParameter
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyAnswerInlineQueryParametersIsPersonal, kn) {
					currentKey = ffjtAnswerInlineQueryParametersIsPersonal
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyAnswerInlineQueryParametersCacheTime, kn) {
					currentKey = ffjtAnswerInlineQueryParametersCacheTime
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyAnswerInlineQueryParametersResults, kn) {
					currentKey = ffjtAnswerInlineQueryParametersResults
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyAnswerInlineQueryParametersSwitchPrivateMessageParameter, kn) {
					currentKey = ffjtAnswerInlineQueryParametersSwitchPrivateMessageParameter
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyAnswerInlineQueryParametersSwitchPrivateMessageText, kn) {
					currentKey = ffjtAnswerInlineQueryParametersSwitchPrivateMessageText
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyAnswerInlineQueryParametersNextOffset, kn) {
					currentKey = ffjtAnswerInlineQueryParametersNextOffset
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyAnswerInlineQueryParametersInlineQueryID, kn) {
					currentKey = ffjtAnswerInlineQueryParametersInlineQueryID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtAnswerInlineQueryParametersnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtAnswerInlineQueryParametersInlineQueryID:
					goto handle_InlineQueryID

				case ffjtAnswerInlineQueryParametersNextOffset:
					goto handle_NextOffset

				case ffjtAnswerInlineQueryParametersSwitchPrivateMessageText:
					goto handle_SwitchPrivateMessageText

				case ffjtAnswerInlineQueryParametersSwitchPrivateMessageParameter:
					goto handle_SwitchPrivateMessageParameter

				case ffjtAnswerInlineQueryParametersResults:
					goto handle_Results

				case ffjtAnswerInlineQueryParametersCacheTime:
					goto handle_CacheTime

				case ffjtAnswerInlineQueryParametersIsPersonal:
					goto handle_IsPersonal

				case ffjtAnswerInlineQueryParametersnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_InlineQueryID:

	/* handler: j.InlineQueryID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.InlineQueryID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_NextOffset:

	/* handler: j.NextOffset type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.NextOffset = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SwitchPrivateMessageText:

	/* handler: j.SwitchPrivateMessageText type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.SwitchPrivateMessageText = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SwitchPrivateMessageParameter:

	/* handler: j.SwitchPrivateMessageParameter type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.SwitchPrivateMessageParameter = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Results:

	/* handler: j.Results type=[]interface {} kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.Results = nil
		} else {

			j.Results = []interface{}{}

			wantVal := true

			for {

				var tmpJResults interface{}

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJResults type=interface {} kind=interface quoted=false*/

				{
					/* Falling back. type=interface {} kind=interface */
					tbuf, err := fs.CaptureField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}

					err = json.Unmarshal(tbuf, &tmpJResults)
					if err != nil {
						return fs.WrapErr(err)
					}
				}

				j.Results = append(j.Results, tmpJResults)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CacheTime:

	/* handler: j.CacheTime type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.CacheTime = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_IsPersonal:

	/* handler: j.IsPersonal type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.IsPersonal = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.IsPersonal = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *AnswerPreCheckoutQueryParameters) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *AnswerPreCheckoutQueryParameters) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"pre_checkout_query_id":`)
	fflib.WriteJsonString(buf, string(j.PreCheckoutQueryID))
	buf.WriteByte(',')
	if len(j.ErrorMessage) != 0 {
		buf.WriteString(`"error_message":`)
		fflib.WriteJsonString(buf, string(j.ErrorMessage))
		buf.WriteByte(',')
	}
	if j.Ok {
		buf.WriteString(`"ok":true`)
	} else {
		buf.WriteString(`"ok":false`)
	}
	buf.WriteByte('}')
	return nil
}

const (
	ffjtAnswerPreCheckoutQueryParametersbase = iota
	ffjtAnswerPreCheckoutQueryParametersnosuchkey

	ffjtAnswerPreCheckoutQueryParametersPreCheckoutQueryID

	ffjtAnswerPreCheckoutQueryParametersErrorMessage

	ffjtAnswerPreCheckoutQueryParametersOk
)

var ffjKeyAnswerPreCheckoutQueryParametersPreCheckoutQueryID = []byte("pre_checkout_query_id")

var ffjKeyAnswerPreCheckoutQueryParametersErrorMessage = []byte("error_message")

var ffjKeyAnswerPreCheckoutQueryParametersOk = []byte("ok")

// UnmarshalJSON umarshall json - template of ffjson
func (j *AnswerPreCheckoutQueryParameters) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *AnswerPreCheckoutQueryParameters) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtAnswerPreCheckoutQueryParametersbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtAnswerPreCheckoutQueryParametersnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'e':

					if bytes.Equal(ffjKeyAnswerPreCheckoutQueryParametersErrorMessage, kn) {
						currentKey = ffjtAnswerPreCheckoutQueryParametersErrorMessage
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'o':

					if bytes.Equal(ffjKeyAnswerPreCheckoutQueryParametersOk, kn) {
						currentKey = ffjtAnswerPreCheckoutQueryParametersOk
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffjKeyAnswerPreCheckoutQueryParametersPreCheckoutQueryID, kn) {
						currentKey = ffjtAnswerPreCheckoutQueryParametersPreCheckoutQueryID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyAnswerPreCheckoutQueryParametersOk, kn) {
					currentKey = ffjtAnswerPreCheckoutQueryParametersOk
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyAnswerPreCheckoutQueryParametersErrorMessage, kn) {
					currentKey = ffjtAnswerPreCheckoutQueryParametersErrorMessage
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyAnswerPreCheckoutQueryParametersPreCheckoutQueryID, kn) {
					currentKey = ffjtAnswerPreCheckoutQueryParametersPreCheckoutQueryID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtAnswerPreCheckoutQueryParametersnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtAnswerPreCheckoutQueryParametersPreCheckoutQueryID:
					goto handle_PreCheckoutQueryID

				case ffjtAnswerPreCheckoutQueryParametersErrorMessage:
					goto handle_ErrorMessage

				case ffjtAnswerPreCheckoutQueryParametersOk:
					goto handle_Ok

				case ffjtAnswerPreCheckoutQueryParametersnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_PreCheckoutQueryID:

	/* handler: j.PreCheckoutQueryID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.PreCheckoutQueryID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ErrorMessage:

	/* handler: j.ErrorMessage type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ErrorMessage = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ok:

	/* handler: j.Ok type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.Ok = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.Ok = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *AnswerShippingQueryParameters) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *AnswerShippingQueryParameters) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ "shipping_query_id":`)
	fflib.WriteJsonString(buf, string(j.ShippingQueryID))
	buf.WriteByte(',')
	if len(j.ErrorMessage) != 0 {
		buf.WriteString(`"error_message":`)
		fflib.WriteJsonString(buf, string(j.ErrorMessage))
		buf.WriteByte(',')
	}
	if j.Ok {
		buf.WriteString(`"ok":true`)
	} else {
		buf.WriteString(`"ok":false`)
	}
	buf.WriteByte(',')
	if len(j.ShippingOptions) != 0 {
		buf.WriteString(`"shipping_options":`)
		if j.ShippingOptions != nil {
			buf.WriteString(`[`)
			for i, v := range j.ShippingOptions {
				if i != 0 {
					buf.WriteString(`,`)
				}
				/* Struct fall back. type=telegram.ShippingOption kind=struct */
				err = buf.Encode(&v)
				if err != nil {
					return err
				}
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffjtAnswerShippingQueryParametersbase = iota
	ffjtAnswerShippingQueryParametersnosuchkey

	ffjtAnswerShippingQueryParametersShippingQueryID

	ffjtAnswerShippingQueryParametersErrorMessage

	ffjtAnswerShippingQueryParametersOk

	ffjtAnswerShippingQueryParametersShippingOptions
)

var ffjKeyAnswerShippingQueryParametersShippingQueryID = []byte("shipping_query_id")

var ffjKeyAnswerShippingQueryParametersErrorMessage = []byte("error_message")

var ffjKeyAnswerShippingQueryParametersOk = []byte("ok")

var ffjKeyAnswerShippingQueryParametersShippingOptions = []byte("shipping_options")

// UnmarshalJSON umarshall json - template of ffjson
func (j *AnswerShippingQueryParameters) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *AnswerShippingQueryParameters) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtAnswerShippingQueryParametersbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtAnswerShippingQueryParametersnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'e':

					if bytes.Equal(ffjKeyAnswerShippingQueryParametersErrorMessage, kn) {
						currentKey = ffjtAnswerShippingQueryParametersErrorMessage
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'o':

					if bytes.Equal(ffjKeyAnswerShippingQueryParametersOk, kn) {
						currentKey = ffjtAnswerShippingQueryParametersOk
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffjKeyAnswerShippingQueryParametersShippingQueryID, kn) {
						currentKey = ffjtAnswerShippingQueryParametersShippingQueryID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyAnswerShippingQueryParametersShippingOptions, kn) {
						currentKey = ffjtAnswerShippingQueryParametersShippingOptions
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyAnswerShippingQueryParametersShippingOptions, kn) {
					currentKey = ffjtAnswerShippingQueryParametersShippingOptions
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyAnswerShippingQueryParametersOk, kn) {
					currentKey = ffjtAnswerShippingQueryParametersOk
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyAnswerShippingQueryParametersErrorMessage, kn) {
					currentKey = ffjtAnswerShippingQueryParametersErrorMessage
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyAnswerShippingQueryParametersShippingQueryID, kn) {
					currentKey = ffjtAnswerShippingQueryParametersShippingQueryID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtAnswerShippingQueryParametersnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtAnswerShippingQueryParametersShippingQueryID:
					goto handle_ShippingQueryID

				case ffjtAnswerShippingQueryParametersErrorMessage:
					goto handle_ErrorMessage

				case ffjtAnswerShippingQueryParametersOk:
					goto handle_Ok

				case ffjtAnswerShippingQueryParametersShippingOptions:
					goto handle_ShippingOptions

				case ffjtAnswerShippingQueryParametersnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_ShippingQueryID:

	/* handler: j.ShippingQueryID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ShippingQueryID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ErrorMessage:

	/* handler: j.ErrorMessage type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ErrorMessage = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ok:

	/* handler: j.Ok type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.Ok = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.Ok = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ShippingOptions:

	/* handler: j.ShippingOptions type=[]telegram.ShippingOption kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.ShippingOptions = nil
		} else {

			j.ShippingOptions = []ShippingOption{}

			wantVal := true

			for {

				var tmpJShippingOptions ShippingOption

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJShippingOptions type=telegram.ShippingOption kind=struct quoted=false*/

				{
					/* Falling back. type=telegram.ShippingOption kind=struct */
					tbuf, err := fs.CaptureField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}

					err = json.Unmarshal(tbuf, &tmpJShippingOptions)
					if err != nil {
						return fs.WrapErr(err)
					}
				}

				j.ShippingOptions = append(j.ShippingOptions, tmpJShippingOptions)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
